/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EventFactoryInterface extends utils.Interface {
  functions: {
    "buy(address,uint256)": FunctionFragment;
    "close(address)": FunctionFragment;
    "create(string,string,string,string,string,string,string,uint256,uint256,uint256)": FunctionFragment;
    "getArchivedEvents()": FunctionFragment;
    "getCreatedEvents(address)": FunctionFragment;
    "getCurrentEvents()": FunctionFragment;
    "getEventDetails(address)": FunctionFragment;
    "getOwnedTicketEvents(address)": FunctionFragment;
    "listingFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "validate(address,uint256,address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buy"
      | "close"
      | "create"
      | "getArchivedEvents"
      | "getCreatedEvents"
      | "getCurrentEvents"
      | "getEventDetails"
      | "getOwnedTicketEvents"
      | "listingFee"
      | "owner"
      | "setOwner"
      | "validate"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "close", values: [string]): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getArchivedEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedEvents",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEventDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnedTicketEvents",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "listingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArchivedEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnedTicketEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export interface OwnerUpdatedEventObject {
  prevOwner: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface EventFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      event_: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    close(
      event_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    create(
      name: string,
      symbol: string,
      description: string,
      imageUrl: string,
      imageUrlValidated: string,
      dateTime: string,
      location: string,
      amount: BigNumberish,
      price: BigNumberish,
      maxAllowedTicketsPerUser: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getArchivedEvents(overrides?: CallOverrides): Promise<[string[]]>;

    getCreatedEvents(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getCurrentEvents(overrides?: CallOverrides): Promise<[string[]]>;

    getEventDetails(
      event_: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, BigNumber] & {
        name: string;
        description: string;
        imageUrl: string;
        dateTime: string;
        location: string;
        price: BigNumber;
        availableTickets: BigNumber;
      }
    >;

    getOwnedTicketEvents(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    listingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validate(
      event_: string,
      tokenId: BigNumberish,
      claimer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  buy(
    event_: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  close(
    event_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  create(
    name: string,
    symbol: string,
    description: string,
    imageUrl: string,
    imageUrlValidated: string,
    dateTime: string,
    location: string,
    amount: BigNumberish,
    price: BigNumberish,
    maxAllowedTicketsPerUser: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getArchivedEvents(overrides?: CallOverrides): Promise<string[]>;

  getCreatedEvents(owner: string, overrides?: CallOverrides): Promise<string[]>;

  getCurrentEvents(overrides?: CallOverrides): Promise<string[]>;

  getEventDetails(
    event_: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, BigNumber, BigNumber] & {
      name: string;
      description: string;
      imageUrl: string;
      dateTime: string;
      location: string;
      price: BigNumber;
      availableTickets: BigNumber;
    }
  >;

  getOwnedTicketEvents(
    user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listingFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validate(
    event_: string,
    tokenId: BigNumberish,
    claimer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      event_: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    close(event_: string, overrides?: CallOverrides): Promise<boolean>;

    create(
      name: string,
      symbol: string,
      description: string,
      imageUrl: string,
      imageUrlValidated: string,
      dateTime: string,
      location: string,
      amount: BigNumberish,
      price: BigNumberish,
      maxAllowedTicketsPerUser: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getArchivedEvents(overrides?: CallOverrides): Promise<string[]>;

    getCreatedEvents(
      owner: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCurrentEvents(overrides?: CallOverrides): Promise<string[]>;

    getEventDetails(
      event_: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, BigNumber] & {
        name: string;
        description: string;
        imageUrl: string;
        dateTime: string;
        location: string;
        price: BigNumber;
        availableTickets: BigNumber;
      }
    >;

    getOwnedTicketEvents(
      user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listingFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    validate(
      event_: string,
      tokenId: BigNumberish,
      claimer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "OwnerUpdated(address,address)"(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
  };

  estimateGas: {
    buy(
      event_: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    close(
      event_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    create(
      name: string,
      symbol: string,
      description: string,
      imageUrl: string,
      imageUrlValidated: string,
      dateTime: string,
      location: string,
      amount: BigNumberish,
      price: BigNumberish,
      maxAllowedTicketsPerUser: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getArchivedEvents(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatedEvents(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentEvents(overrides?: CallOverrides): Promise<BigNumber>;

    getEventDetails(
      event_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnedTicketEvents(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validate(
      event_: string,
      tokenId: BigNumberish,
      claimer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      event_: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    close(
      event_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    create(
      name: string,
      symbol: string,
      description: string,
      imageUrl: string,
      imageUrlValidated: string,
      dateTime: string,
      location: string,
      amount: BigNumberish,
      price: BigNumberish,
      maxAllowedTicketsPerUser: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getArchivedEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreatedEvents(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEventDetails(
      event_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnedTicketEvents(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validate(
      event_: string,
      tokenId: BigNumberish,
      claimer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
